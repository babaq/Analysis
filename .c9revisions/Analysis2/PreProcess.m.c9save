{"ts":1353160035704,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function Data = PreProcess(DataSet,Extent,Delay,Type,varargin)\n%                       PreProcess.m\n%                     2011-03-17 Zhang Li\n%   Organize All Neural Data Accordding to Experiment Design\n%\n%           Data = PreProcess(DataSet,Extent,Delay,Type)\n%           Data = PreProcess(DataSet,Extent,Delay,Type,Step,Course)\n%\n%   Data Segment are extended/shrinked on +/-(Extent)(ms)\n%   Delay is the Segment time shift on +/-(Delay)(ms) after/before stimulus onset\n%   Process Type is either 1(Snip) or 2(Wave) or 0(Both)\n%   Step(varargin 1) is the time step(ms) used in dynamics of firing of Reverse-Correlation Diagram\n%   Course(varargin 2) is the time course(ms) of stepping of Reverse-Correlation Diagram\n%       ----------------------------------------------\n%       ------------Data Structure to Method----------\n%       ----------------------------------------------\n%       Data.Dinf --- Data Source Information\n%                   Dinf.server --- Data Source Server(String)\n%                   Dinf.tank --- Data Tank Name(String)\n%                   Dinf.block --- Data Block Name(String)\n%                   Dinf.extent --- Data Segment Extend Time(double)(sec)\n%                   Dinf.delay --- Data Segment Delay Time(double)(sec)\n%                   Dinf.msegt --- Mean Data Segment Duration Time(double)(sec)\n%\n%       ----------------------------------------------\n%       Data.Mark --- Marker Data\n%                   Mark.mark --- All Marker TimeStamp[1,:]\n%                   Mark.markn --- Total Marker Number(unsigned int)\n%                   Mark.key --- MarkHead Common Keywords{:,2}\n%\n%                           For Example:\n%\n%                               'Experiment'    'dBar'\n%                               'ExParameter'   'Direction'\n%                               'Condition'     16\n%                               'RandomSeed'    26\n%                               'Trial'         30\n%                               .               .\n%                               .               .\n%                               .               .\n%\n%                   Mark.extype --- Experiment Type(string)\n%                   Mark.trial --- Experiment Trials(unsigned int)\n%                   Mark.ckey --- MarkHead Custom Keywords{:,2}\n%\n%                           For Example:\n%\n%                               'Height'        1\n%                               'Width'         4\n%                               'Orientation'   90\n%                               'Direction'     0\n%                               'Speed'         20\n%                               'CenterX'       0\n%                               'CenterY'       3\n%                               .               .\n%                               .               .\n%                               .               .\n%\n%                   Mark.stimuli --- Real Stimulus Number(unsigned int)\n%                   Mark.condtable --- Array of All Condition Levels{1,Condn}[1,CondLeveln]\n%                   Mark.stitable --- Conversion Array of Stimuli to CondTable Index{1,Stimuli}[Cond1_LevelIndex,Cond2_LevelIndex,...]\n%                   Mark.exseq --- Experiment Random Sequence[Trial,Stimuli]\n%                   Mark.tick --- Real Stimulus Marker TimeStamp[1,:]\n%                   Mark.hresult --- Marker Completion Check(String)\n%                   Mark.ticktype --- Stimulus Marker Encoding Type(String)\n%                   Mark.on --- Real Stimulus Onset[Trial,Stimuli]\n%                   Mark.off --- Real Stimulus Offset[Trial,Stimuli]\n%\n%       ----------------------------------------------\n%       Data.Snip --- Spike Data\n%                   Snip.spevent --- Spike Event Name(String)\n%                   Snip.chn --- Channal Number(unsigned int)\n%                   Snip.swn --- Snip Wave Segment Sample Number(unsigned int)\n%                   Snip.fs --- Snip Wave Segment Sampling Frequency(double)\n%                   Snip.sortn --- Sort Number of Each Channal[Channal,1]\n%                   Snip.ppsortn --- Sort Number of Each Channal[Channal,1] (PreProcessed, Multi-SU Pooled To MU In End)\n%                   Snip.snipn --- Spike Number of Each Channal and Sort{Channal,Sortcode}\n%                   Snip.ppsnipn --- Spike Number of Each Channal and Sort{Channal,Sortcode} (PreProcessed, Multi-SU Pooled To MU In End)\n%                   ----------------------------------------------\n%                   Snip.snip --- Snip In Channals and Sorts\n%                               snip{Channal,Sortcode}.spike --- All Raw Spike TimeStamp [1,TimeStamp] (Original)\n%                               snip{Channal,Sortcode}.ppspike --- All Spike TimeStamp{Trial,Stimuli}[1,TimeStamp] (PreProcessed, Multi-SU Pooled To MU In End)\n%\n%                               For Example:\n%\n%                               Data.Snip.snip{Channal_1,Sort_1}.spike(Trial_1,Stimuli_1,:) is organized as such:\n%\n%                               1-2-3-     ...     -10-11-12-13-14-15-   ...   -(n-2)-(n-1)-n\n%                               |           |            |            |            |        |\n%                            -Extent  Stimulus Onset   Delay    Stimulus Offset  Delay    Extent\n%\n%                              snip{Channal,Sortcode}.spikewave --- All Raw Spike Segments{[1,TimeStamp] [Segment,TimeStamp]} (Original)\n%                              snip{Channal,Sortcode}.ppfr --- ReverseCorrelation Dynamic Firing Rate[Trial,Stimuli,DelayStep] (PreProcessed, SU Pooled To MU In End)\n%\n%       -----------------------------------------------\n%       Data.Wave --- Wave Data\n%                   Wave.wvevent --- Wave Event Name(String)\n%                   Wave.chn --- Channal Number(unsigned int)\n%                   Wave.fs --- Wave Sampling Frequency(double)\n%                   Wave.ontime --- Begin Time of Wave(double)\n%                   ----------------------------------------------\n%                   Wave.wave --- Wave In Channals\n%                               wave{Channal}.wave --- All Raw Wave Data [1,DataPoint] (Original)\n%                               wave{Channal}.ppwave --- All Wave Data {Trial,Stimuli}[DataPoint,1] (PreProcessed, LineNoise Removed)\n%                               wave{Channal}.phase --- All Raw Wave Phase [1,PhasePoint] (Original)\n%                                                       All Wave Phase [Trial,Stimuli,PhasePoint] (PreProcessed)\n%\n%                               Wave Extent and Delay Organization is the same as Data.Snip.snip.spike\n%\n%       ------------------------------------------------\n%       Data.Method --- Analysis Method(String)\n%\n%       ------------------------------------------------\n%       Data.OutputDir --- Result Output Path(String)\n%\n\nData.Dinf = DataSet.Dinf;\nextent=Extent/1000; % convert to second\ndelay=Delay/1000; % convert to second\nData.Dinf.extent = extent;\nData.Dinf.delay = delay;\n\nData.Mark = DataSet.Mark;\nData.Method = DataSet.Method;\nData.OutputDir = DataSet.OutputDir;\n\nmstidur = mean(mean(Data.Mark.off-Data.Mark.on));\nData.Dinf.msegt = mstidur+2*extent;\n%% PreProcess Snip Data\nif isfield(DataSet,'Snip')\n    \n    Data.Snip = DataSet.Snip;\n    \n    if Type~=2\n        \n        % In default Two/One Marker Mode, Organize Stimulus-Response Spikes\n        ppsortn = Data.Snip.sortn;\n        ppsnipn = Data.Snip.snipn;\n        for i=1:Data.Snip.chn\n            for j=1:Data.Snip.sortn(i)\n                for t=1:Data.Mark.trial\n                    for s=1:Data.Mark.stimuli\n                        \n                        spikeindex = Data.Mark.on(t,s)-extent+delay<=Data.Snip.snip{i,j}.spike & ...\n                            Data.Snip.snip{i,j}.spike<Data.Mark.off(t,s)+extent+delay;\n                        Data.Snip.snip{i,j}.ppspike{t,s} = Data.Snip.snip{i,j}.spike(spikeindex);\n                        \n                    end\n                end\n            end\n            \n            if Data.Snip.sortn(i)>1 % Have multi SU, need pooling SU to MU\n                ppsortn(i) = ppsortn(i) + 1;\n                ppsnipn{ppsortn(i)} = 0;\n                \n                temp = cell(Data.Mark.trial,Data.Mark.stimuli);\n                for j=1:Data.Snip.sortn(i)\n                    for t=1:Data.Mark.trial\n                        for s=1:Data.Mark.stimuli\n                            \n                            temp{t,s} = [temp{t,s} Data.Snip.snip{i,j}.ppspike{t,s}];\n                            \n                        end\n                    end\n                    ppsnipn{ppsortn(i)} = ppsnipn{ppsortn(i)} + ppsnipn{j};\n                end\n                \n                Data.Snip.snip{i,ppsortn(i)}.ppspike = temp;\n            end\n            \n        end\n        Data.Snip.ppsortn = ppsortn;\n        Data.Snip.ppsnipn = ppsnipn;\n        \n        \n        \n        % In One Marker Mode, Get Reverse Correlation Dynamic Firing Rate\n        if strcmp(Data.Mark.ticktype,'one') && length(varargin)==2\n            step = varargin{1}/1000; % convert to second\n            course = varargin{2}/1000; % convert to second\n            Data.Dinf.step = step;\n            Data.Dinf.course = course;\n            \n            stepn = floor(course/step);\n            for i=1:Data.Snip.chn\n                for j=1:Data.Snip.sortn(i)\n                    \n                    sp = Data.Snip.snip{i,j}.spike;\n                    for d=1:stepn\n                        \n                        tickn = length(Data.Mark.tick);\n                        tickbin = cat(2,Data.Mark.tick,Data.Mark.tick(end) + mstidur);\n                        spcount = histc(sp,tickbin + step*(d-1));\n                        temp = spcount(1:tickn)/mstidur;\n                        \n                        for k=0:tickn-1\n                            t = floor(k/Data.Mark.stimuli)+1;\n                            s = k-(Data.Mark.stimuli*(t-1))+1;\n                            s = Data.Mark.exseq(t,s)+1;\n                            Data.Snip.snip{i,j}.ppfr(t,s,d) = temp(k+1);\n                        end\n                    end\n                end\n                \n                if Data.Snip.sortn(i)>1 % Have multi SU, need pooling SU to MU\n                    temp = 0;\n                    for j=1:Data.Snip.sortn(i)\n                        temp = temp + Data.Snip.snip{i,j}.ppfr;\n                    end\n                    Data.Snip.snip{i,Data.Snip.ppsortn(i)}.ppfr = temp;\n                end\n                \n            end\n        end\n        \n    end\n    \nend\n\n%% PreProcess Wave Data\nif isfield(DataSet,'Wave')\n    \n    Data.Wave = DataSet.Wave;\n    \n    f0 = 50; % Line Noise Frequency\n    nharmonic = 1;\n    xsd = 4; % X times SD to remove wave artifact\n    isrmartifact = 1;\n    isrmline = 1;\n    thrasn = 3;\n    \n    if (isfield(Data,'Snip')) && (isfield(Data.Snip,'ppsortn')) && (length(varargin)==2)\n        pret = varargin{1}/1000; % convert to second\n        post = varargin{2}/1000; % convert to second\n        Data.Dinf.pret = pret;\n        Data.Dinf.post = post;\n        pret=round(pret*Data.Wave.fs);\n        post=round(post*Data.Wave.fs);\n        isrmspike = 1;\n    else\n        isrmspike = 0;\n    end\n    \n    if Type~=1\n        \n        % In default Two Marker Mode, organize Stimulus-Response Wave DataPoints\n        \n        for i=1:Data.Wave.chn\n            for s=1:Data.Mark.stimuli\n                for t=1:Data.Mark.trial\n                    \n                    \n                    a=Data.Mark.on(t,s)-extent+delay-Data.Wave.ontime;\n                    b=Data.Mark.off(t,s)+extent+delay-Data.Wave.ontime;\n                    a=round(a*Data.Wave.fs);\n                    b=round(b*Data.Wave.fs);\n                    temp = Data.Wave.wave{i}.wave(a:b);\n                    \n                    if isrmartifact\n                        [temp info] = rmartifact(temp,xsd,[]);\n                        if info.isartifact\n                            asn = length(info.asn);\n                            disp(['In Channal ',num2str(i),', Trial ',num2str(t),', Stimuli ',num2str(s),...\n                                ', Mean��',num2str(xsd),'SD Wave Artifacts have been linearly interpolated.']);\n                            for ai=1:asn\n                                disp(['Artifact',num2str(ai),'---',num2str(info.asn(ai)*1000/Data.Wave.fs),' ms']);\n                            end\n                            if asn>thrasn\n                                disp(['More than ',num2str(thrasn),' Artifacts, Need to delete this trial.']);\n                            end\n                            disp('-------------------------------------------------------------------------');\n                        end\n                    end\n                    if isrmline\n                        temp = rmline(temp',DataSet.Wave.fs,f0,nharmonic);\n                    end\n                    if isrmspike\n                        st = Data.Snip.snip{i,Data.Snip.ppsortn(i)}.ppspike{t,s};\n                        if ~isempty(st)\n                            st = st - (DataSet.Mark.on(t,s)-extent+delay);\n                            st = round(st*Data.Wave.fs);\n                            Data.Wave.wave{i}.ppwave{t,s} = rmspike(temp,st,pret,post);\n                        else\n                            Data.Wave.wave{i}.ppwave{t,s} = temp;\n                        end\n                    else\n                        Data.Wave.wave{i}.ppwave{t,s} = temp;\n                    end\n                end\n            end\n        end\n        \n    end\n    \nend\n\nend %eof"]],"start1":0,"start2":0,"length1":0,"length2":13469}]],"length":13469}
